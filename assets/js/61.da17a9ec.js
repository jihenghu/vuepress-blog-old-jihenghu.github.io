(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{389:function(e,a,s){"use strict";s.r(a);var t=s(0),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#array-functions"}},[e._v("Array Functions")]),s("ul",[s("li",[s("a",{attrs:{href:"#first"}},[e._v("first")])]),s("li",[s("a",{attrs:{href:"#initial"}},[e._v("initial")])]),s("li",[s("a",{attrs:{href:"#last"}},[e._v("last")])]),s("li",[s("a",{attrs:{href:"#rest"}},[e._v("rest")])]),s("li",[s("a",{attrs:{href:"#compact"}},[e._v("compact")])]),s("li",[s("a",{attrs:{href:"#flatten"}},[e._v("flatten")])]),s("li",[s("a",{attrs:{href:"#without"}},[e._v("without")])]),s("li",[s("a",{attrs:{href:"#union"}},[e._v("union")])]),s("li",[s("a",{attrs:{href:"#intersection"}},[e._v("intersection")])]),s("li",[s("a",{attrs:{href:"#difference"}},[e._v("difference")])]),s("li",[s("a",{attrs:{href:"#uniq"}},[e._v("uniq")])]),s("li",[s("a",{attrs:{href:"#zip"}},[e._v("zip")])]),s("li",[s("a",{attrs:{href:"#unzip"}},[e._v("unzip")])]),s("li",[s("a",{attrs:{href:"#object"}},[e._v("object")])]),s("li",[s("a",{attrs:{href:"#indexof"}},[e._v("indexOf")])]),s("li",[s("a",{attrs:{href:"#lastindexof"}},[e._v("lastIndexOf")])]),s("li",[s("a",{attrs:{href:"#sortedindex"}},[e._v("sortedIndex")])]),s("li",[s("a",{attrs:{href:"#findindex"}},[e._v("findIndex")])]),s("li",[s("a",{attrs:{href:"#findlastindex"}},[e._v("findLastIndex")])]),s("li",[s("a",{attrs:{href:"#range"}},[e._v("range")])])])])])]),s("p"),e._v(" "),s("h2",{attrs:{id:"array-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-functions"}},[e._v("#")]),e._v(" Array Functions")]),e._v(" "),s("p",[e._v('Note: All array functions will also work on the arguments object. However, Underscore functions are not designed to work on "sparse" arrays.')]),e._v(" "),s("h3",{attrs:{id:"first"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#first"}},[e._v("#")]),e._v(" first")]),e._v(" "),s("p",[s("code",[e._v("_.first(array, [n])")]),e._v(" Aliases: head, take"),s("br"),e._v("\nReturns the first element of an array. Passing n will return the first n elements of the array.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.first([5, 4, 3, 2, 1]);\n=> 5\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"initial"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initial"}},[e._v("#")]),e._v(" initial")]),e._v(" "),s("p",[s("code",[e._v("_.initial(array, [n])")]),s("br"),e._v("\nReturns everything but the last entry of the array. Especially useful on the arguments object. Pass n to exclude the last n elements from the result.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.initial([5, 4, 3, 2, 1]);\n=> [5, 4, 3, 2]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"last"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#last"}},[e._v("#")]),e._v(" last")]),e._v(" "),s("p",[s("code",[e._v("_.last(array, [n])")]),s("br"),e._v("\nReturns the last element of an array. Passing n will return the last n elements of the array.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.last([5, 4, 3, 2, 1]);\n=> 1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"rest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rest"}},[e._v("#")]),e._v(" rest")]),e._v(" "),s("p",[s("code",[e._v("_.rest(array, [index])")]),e._v("Aliases: tail, drop"),s("br"),e._v("\nReturns the rest of the elements in an array. Pass an index to return the values of the array from that index onward.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.rest([5, 4, 3, 2, 1]);\n=> [4, 3, 2, 1] \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"compact"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compact"}},[e._v("#")]),e._v(" compact")]),e._v(" "),s("p",[s("code",[e._v("_.compact(array)")]),s("br"),e._v('\nReturns a copy of the array with all falsy values removed. In JavaScript, false, null, 0, "", undefined and NaN are all falsy.')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"flatten"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flatten"}},[e._v("#")]),e._v(" flatten")]),e._v(" "),s("p",[e._v("_.flatten(array, [shallow])"),s("br"),e._v("\nFlattens a nested array (the nesting can be to any depth). If you pass shallow, the array will only be flattened a single level.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.flatten([1, [2], [3, [[4]]]]);\n=> [1, 2, 3, 4];\n\n_.flatten([1, [2], [3, [[4]]]], true);\n=> [1, 2, 3, [[4]]];\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"without"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#without"}},[e._v("#")]),e._v(" without")]),e._v(" "),s("p",[e._v("_.without(array, *values)"),s("br"),e._v("\nReturns a copy of the array with all instances of the values removed.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n=> [2, 3, 4]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"union"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#union"}},[e._v("#")]),e._v(" union")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.union(*arrays)   \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n=> [1, 2, 3, 101, 10]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"intersection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intersection"}},[e._v("#")]),e._v(" intersection")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.intersection(*arrays)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Computes the list of values that are the intersection of all the arrays. Each value in the result is present in each of the arrays.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n=> [1, 2]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"difference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#difference"}},[e._v("#")]),e._v(" difference")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.difference(array, *others) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Similar to without, but returns the values from array that are not present in the other arrays.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n=> [1, 3, 4]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"uniq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uniq"}},[e._v("#")]),e._v(" uniq")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.uniq(array, [isSorted], [iteratee]) Alias: unique \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Produces a duplicate-free version of the array, using === to test object equality. In particular only the first occurence of each value is kept. If you know in advance that the array is sorted, passing true for isSorted will run a much faster algorithm. If you want to compute unique items based on a transformation, pass an iteratee function.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.uniq([1, 2, 1, 4, 1, 3]);\n=> [1, 2, 4, 3]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"zip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zip"}},[e._v("#")]),e._v(" zip")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.zip(*arrays) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Merges together the values of each of the arrays with the values at the corresponding position. Useful when you have separate data sources that are coordinated through matching array indexes. Use with apply to pass in an array of arrays. If you're working with a matrix of nested arrays, this can be used to transpose the matrix.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);\n=> [[\"moe\", 30, true], [\"larry\", 40, false], [\"curly\", 50, false]]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"unzip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unzip"}},[e._v("#")]),e._v(" unzip")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.unzip(array)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("The opposite of zip. Given an array of arrays, returns a series of new arrays, the first of which contains all of the first elements in the input arrays, the second of which contains all of the second elements, and so on.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.unzip([[\"moe\", 30, true], [\"larry\", 40, false], [\"curly\", 50, false]]);\n=> [['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[e._v("#")]),e._v(" object")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.object(list, [values]) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Converts arrays into objects. Pass either a single list of [key, value] pairs, or a list of keys, and a list of values. If duplicate keys exist, the last value wins.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n=> {moe: 30, larry: 40, curly: 50}\n\n_.object([['moe', 30], ['larry', 40], ['curly', 50]]);\n=> {moe: 30, larry: 40, curly: 50}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"indexof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indexof"}},[e._v("#")]),e._v(" indexOf")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.indexOf(array, value, [isSorted]) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Returns the index at which value can be found in the array, or -1 if value is not present in the array. If you're working with a large array, and you know that the array is already sorted, pass true for isSorted to use a faster binary search ... or, pass a number as the third argument in order to look for the first matching value in the array after the given index.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.indexOf([1, 2, 3], 2);\n=> 1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"lastindexof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lastindexof"}},[e._v("#")]),e._v(" lastIndexOf")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.lastIndexOf(array, value, [fromIndex]) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Returns the index of the last occurrence of value in the array, or -1 if value is not present. Pass fromIndex to start your search at a given index.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n=> 4\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"sortedindex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sortedindex"}},[e._v("#")]),e._v(" sortedIndex")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.sortedIndex(list, value, [iteratee], [context])\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order. If an iteratee function is provided, it will be used to compute the sort ranking of each value, including the value you pass. The iteratee may also be the string name of the property to sort by (eg. length).")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.sortedIndex([10, 20, 30, 40, 50], 35);\n=> 3\n\nvar stooges = [{name: 'moe', age: 40}, {name: 'curly', age: 60}];\n_.sortedIndex(stooges, {name: 'larry', age: 50}, 'age');\n=> 1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"findindex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#findindex"}},[e._v("#")]),e._v(" findIndex")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.findIndex(array, predicate, [context]) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Similar to _.indexOf, returns the first index where the predicate truth test passes; otherwise returns -1.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.findIndex([4, 6, 8, 12], isPrime);\n=> -1 // not found\n_.findIndex([4, 6, 7, 12], isPrime);\n=> 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"findlastindex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#findlastindex"}},[e._v("#")]),e._v(" findLastIndex")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.findLastIndex(array, predicate, [context]) \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Like _.findIndex but iterates the array in reverse, returning the index closest to the end where the predicate truth test passes.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var users = [{'id': 1, 'name': 'Bob', 'last': 'Brown'},\n             {'id': 2, 'name': 'Ted', 'last': 'White'},\n             {'id': 3, 'name': 'Frank', 'last': 'James'},\n             {'id': 4, 'name': 'Ted', 'last': 'Jones'}];\n_.findLastIndex(users, {\n  name: 'Ted'\n});\n=> 3\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h3",{attrs:{id:"range"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range"}},[e._v("#")]),e._v(" range")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.range([start], stop, [step])\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("A function to create flexibly-numbered lists of integers, handy for each and map loops. start, if omitted, defaults to 0; step defaults to 1. Returns a list of integers from start (inclusive) to stop (exclusive), incremented (or decremented) by step, exclusive. Note that ranges that stop before they start are considered to be zero-length instead of negative — if you'd like a negative range, use a negative step.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_.range(10);\n=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n_.range(1, 11);\n=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n_.range(0, 30, 5);\n=> [0, 5, 10, 15, 20, 25]\n_.range(0, -10, -1);\n=> [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n_.range(0);\n=> []\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);